/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DBSProject;

import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.regex.Pattern;

/**
 *
 * @author Admin
 */
public class AdminFrame extends javax.swing.JFrame {

    /**
     * Creates new form AdminFrame
     */
    public AdminFrame() {
        initComponents();
        setSize(1200,700);
        setLocationRelativeTo(null);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menupanel = new javax.swing.JPanel();
        guest = new javax.swing.JButton();
        deleteacrecord = new javax.swing.JButton();
        viewacdata = new javax.swing.JButton();
        viewnonacdata = new javax.swing.JButton();
        deleterecordicon = new javax.swing.JLabel();
        deleteolddataicon = new javax.swing.JLabel();
        searchacrecord = new javax.swing.JButton();
        acsearchicon = new javax.swing.JLabel();
        viewacdataicon = new javax.swing.JLabel();
        viewnonacdataicon = new javax.swing.JLabel();
        inserticon = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        menulabel = new javax.swing.JLabel();
        Rooms = new javax.swing.JButton();
        addacrooms = new javax.swing.JButton();
        addnonacrooms = new javax.swing.JButton();
        searchnonacrecord = new javax.swing.JButton();
        nonacsearchicon = new javax.swing.JLabel();
        deletenonacrecord = new javax.swing.JButton();
        adminframetitlepanel = new javax.swing.JPanel();
        admincontrol = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        tablepanel = new javax.swing.JPanel();
        tablescrollpane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        roomsmenupanel = new javax.swing.JPanel();
        roomslabel = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        roomspanel = new javax.swing.JPanel();
        roomstablescrolpane = new javax.swing.JScrollPane();
        roomstable = new javax.swing.JTable();
        tableshowpanel = new javax.swing.JPanel();
        tableshow = new javax.swing.JLabel();
        roomallocationtablepanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomallocationtable = new javax.swing.JTable();
        adminframepanel = new javax.swing.JPanel();
        getacroomallocation = new javax.swing.JButton();
        getnonacroomallocation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        menupanel.setBackground(new java.awt.Color(124, 141, 131));
        menupanel.setLayout(null);

        guest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guest.setText("Guest");
        guest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestActionPerformed(evt);
            }
        });
        menupanel.add(guest);
        guest.setBounds(20, 190, 170, 30);

        deleteacrecord.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteacrecord.setText("Delete AC Record");
        deleteacrecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteacrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteacrecordActionPerformed(evt);
            }
        });
        menupanel.add(deleteacrecord);
        deleteacrecord.setBounds(20, 340, 170, 30);

        viewacdata.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewacdata.setText("View AC Data ");
        viewacdata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewacdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewacdataActionPerformed(evt);
            }
        });
        menupanel.add(viewacdata);
        viewacdata.setBounds(20, 240, 170, 30);

        viewnonacdata.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewnonacdata.setText("View Non AC Data");
        viewnonacdata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        viewnonacdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewnonacdataActionPerformed(evt);
            }
        });
        menupanel.add(viewnonacdata);
        viewnonacdata.setBounds(20, 290, 170, 30);

        deleterecordicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleterecordicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete.png"))); // NOI18N
        menupanel.add(deleterecordicon);
        deleterecordicon.setBounds(190, 390, 30, 30);

        deleteolddataicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteolddataicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete.png"))); // NOI18N
        menupanel.add(deleteolddataicon);
        deleteolddataicon.setBounds(190, 340, 30, 30);

        searchacrecord.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchacrecord.setText("Search AC Record");
        searchacrecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchacrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchacrecordActionPerformed(evt);
            }
        });
        menupanel.add(searchacrecord);
        searchacrecord.setBounds(20, 90, 170, 30);

        acsearchicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        acsearchicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user.png"))); // NOI18N
        menupanel.add(acsearchicon);
        acsearchicon.setBounds(190, 90, 30, 30);

        viewacdataicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viewacdataicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view.png"))); // NOI18N
        menupanel.add(viewacdataicon);
        viewacdataicon.setBounds(190, 240, 30, 30);

        viewnonacdataicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viewnonacdataicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view.png"))); // NOI18N
        menupanel.add(viewnonacdataicon);
        viewnonacdataicon.setBounds(190, 290, 30, 30);

        inserticon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inserticon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/insert.png"))); // NOI18N
        menupanel.add(inserticon);
        inserticon.setBounds(190, 190, 30, 30);

        menu.setBackground(new java.awt.Color(151, 88, 131));
        menu.setLayout(null);

        menulabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        menulabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menulabel.setText("Menu");
        menu.add(menulabel);
        menulabel.setBounds(70, 10, 80, 40);

        menupanel.add(menu);
        menu.setBounds(0, 0, 240, 70);

        Rooms.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Rooms.setText("Rooms");
        Rooms.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Rooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomsActionPerformed(evt);
            }
        });
        menupanel.add(Rooms);
        Rooms.setBounds(20, 440, 170, 30);

        addacrooms.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addacrooms.setText("Add AC Rooms");
        addacrooms.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addacrooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addacroomsActionPerformed(evt);
            }
        });
        menupanel.add(addacrooms);
        addacrooms.setBounds(20, 490, 170, 30);

        addnonacrooms.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addnonacrooms.setText("Add Non AC Rooms");
        addnonacrooms.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addnonacrooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnonacroomsActionPerformed(evt);
            }
        });
        menupanel.add(addnonacrooms);
        addnonacrooms.setBounds(20, 540, 170, 30);

        searchnonacrecord.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchnonacrecord.setText("Search NAC Record");
        searchnonacrecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchnonacrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchnonacrecordActionPerformed(evt);
            }
        });
        menupanel.add(searchnonacrecord);
        searchnonacrecord.setBounds(20, 140, 170, 30);

        nonacsearchicon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nonacsearchicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user.png"))); // NOI18N
        menupanel.add(nonacsearchicon);
        nonacsearchicon.setBounds(190, 140, 30, 30);

        deletenonacrecord.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deletenonacrecord.setText("Delete NAC Record");
        deletenonacrecord.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deletenonacrecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletenonacrecordActionPerformed(evt);
            }
        });
        menupanel.add(deletenonacrecord);
        deletenonacrecord.setBounds(20, 390, 170, 30);

        getContentPane().add(menupanel);
        menupanel.setBounds(0, 60, 240, 610);

        adminframetitlepanel.setBackground(new java.awt.Color(248, 245, 241));
        adminframetitlepanel.setLayout(null);

        admincontrol.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        admincontrol.setText("Admin Control");
        adminframetitlepanel.add(admincontrol);
        admincontrol.setBounds(470, 0, 260, 60);

        back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N
        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        adminframetitlepanel.add(back);
        back.setBounds(10, 10, 37, 30);

        getContentPane().add(adminframetitlepanel);
        adminframetitlepanel.setBounds(0, 0, 1190, 60);

        tablepanel.setBackground(new java.awt.Color(243, 200, 243));
        tablepanel.setLayout(null);

        tablescrollpane.setBackground(new java.awt.Color(243, 200, 243));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Roll No", "Name", "Father's Name", "Contact", "Blood Group", "Country", "Province", "District", "Address", "Email", "Emergency Contact", "Room Allow Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setShowHorizontalLines(true);
        table.setShowVerticalLines(true);
        table.getTableHeader().setReorderingAllowed(false);
        tablescrollpane.setViewportView(table);

        tablepanel.add(tablescrollpane);
        tablescrollpane.setBounds(0, 0, 950, 250);

        getContentPane().add(tablepanel);
        tablepanel.setBounds(240, 130, 950, 250);

        roomsmenupanel.setBackground(new java.awt.Color(124, 141, 131));
        roomsmenupanel.setLayout(null);

        roomslabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        roomslabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomslabel.setText("Rooms");
        roomsmenupanel.add(roomslabel);
        roomslabel.setBounds(0, 0, 240, 40);

        title.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomsmenupanel.add(title);
        title.setBounds(510, 6, 320, 30);

        getContentPane().add(roomsmenupanel);
        roomsmenupanel.setBounds(240, 380, 950, 40);

        roomspanel.setBackground(new java.awt.Color(204, 204, 204));
        roomspanel.setLayout(null);

        roomstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Rooms", "Non AC Rooms"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomstable.setShowHorizontalLines(true);
        roomstable.setShowVerticalLines(true);
        roomstable.getTableHeader().setReorderingAllowed(false);
        roomstablescrolpane.setViewportView(roomstable);

        roomspanel.add(roomstablescrolpane);
        roomstablescrolpane.setBounds(0, 0, 230, 70);

        getContentPane().add(roomspanel);
        roomspanel.setBounds(240, 420, 230, 70);

        tableshowpanel.setBackground(new java.awt.Color(124, 141, 131));
        tableshowpanel.setLayout(null);

        tableshow.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tableshow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tableshowpanel.add(tableshow);
        tableshow.setBounds(280, 16, 410, 40);

        getContentPane().add(tableshowpanel);
        tableshowpanel.setBounds(240, 60, 950, 70);

        roomallocationtablepanel.setBackground(new java.awt.Color(204, 204, 204));
        roomallocationtablepanel.setLayout(null);

        roomallocationtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No", "Student 1", "Student 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomallocationtable.setShowHorizontalLines(true);
        roomallocationtable.setShowVerticalLines(true);
        roomallocationtable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(roomallocationtable);

        roomallocationtablepanel.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 560, 250);

        getContentPane().add(roomallocationtablepanel);
        roomallocationtablepanel.setBounds(630, 420, 560, 250);

        adminframepanel.setBackground(new java.awt.Color(248, 245, 241));
        adminframepanel.setLayout(null);

        getacroomallocation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getacroomallocation.setText("Show AC Room Allocation");
        getacroomallocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getacroomallocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getacroomallocationActionPerformed(evt);
            }
        });
        adminframepanel.add(getacroomallocation);
        getacroomallocation.setBounds(310, 520, 250, 30);

        getnonacroomallocation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        getnonacroomallocation.setText("Show Non AC Room Allocation");
        getnonacroomallocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getnonacroomallocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getnonacroomallocationActionPerformed(evt);
            }
        });
        adminframepanel.add(getnonacroomallocation);
        getnonacroomallocation.setBounds(310, 590, 250, 30);

        getContentPane().add(adminframepanel);
        adminframepanel.setBounds(0, 10, 1190, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestActionPerformed
        
        new Guest().setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_guestActionPerformed

    private void deleteacrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteacrecordActionPerformed

        boolean check=false;
        
       try{
           String roll_no=JOptionPane.showInputDialog(null, "Enter Roll No: ");
           
        if(roll_no==null)
        {
            
        }
        
        else if(roll_no.length()<=0)
        {
            JOptionPane.showMessageDialog(null, "You have entered nothing!", null, JOptionPane.WARNING_MESSAGE);
        }
           
        else
        {
           Connection con=new DBConnection().getConnection();
           Statement s=con.createStatement();
           ResultSet rs=s.executeQuery("select roll_no from hostel_data_ac");
           while(rs.next())
           {
               String str=rs.getString(1);
               if(str.equals(roll_no))
               {
                   check=true;
                   break;
               }
               else
               {
                   check=false;
               }
           }
           
           if(check)
           {
               
		int response = JOptionPane.showConfirmDialog(null, "Sure? Do you want to delete?",null,JOptionPane.YES_NO_OPTION);
		
		if(response==JOptionPane.YES_OPTION)
		{
                    s.executeQuery("delete from hostel_data_ac where roll_no='"+roll_no+"'");
                    s.executeQuery("commit");
                    JOptionPane.showMessageDialog(null, "Record Deleted");
		}
		else if(response==JOptionPane.NO_OPTION)
		{
                    
		}
                
           }
           else
           {
               JOptionPane.showMessageDialog(null, "Roll No does not exist!",null,JOptionPane.ERROR_MESSAGE);
           }
        }
        
       }catch(SQLException e){
           JOptionPane.showMessageDialog(null,e);
       }
        
    }//GEN-LAST:event_deleteacrecordActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        
        new MainFrame().setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_backMouseClicked

    private void searchacrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchacrecordActionPerformed
        
        boolean check=false;
        String roll_no = JOptionPane.showInputDialog(null, "Enter roll no:");
        
        if(roll_no==null)
        {
            
        }
        
        else if(roll_no.length()<=0)
        {
            
        }
        else{
        
            try{
                Connection con=new DBConnection().getConnection();
                Statement s=con.createStatement();
                ResultSet rs=s.executeQuery("select roll_no from hostel_data_ac");
                while(rs.next())
                {
                    String str=rs.getString(1);
                    if(str.equals(roll_no))
                    {
                        check=true;
                        break;
                    }
                    else
                    {
                        check=false;
                    }
                }
                if(check)
                {
                     tableshow.setText("AC Record");
                     javax.swing.table.DefaultTableModel model;
                     table.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Roll No", "Name", "Father's Name","Contact", "Blood Group", "Country", "Province", "District", "Address", "Email", "Emergency Contact", "Room Allow Date"}));

                     ResultSet rs2=s.executeQuery("select * from hostel_data_ac where roll_no='"+roll_no+"'");
                    while(rs2.next())
                    {
                     String rollno=rs2.getString(1);
                     String name=rs2.getString(2);
                     String fname=rs2.getString(3);
                     String contact=String.valueOf(rs2.getLong(4));
                     String bloodgroup=rs2.getString(5);
                     String country=rs2.getString(6);
                     String province=rs2.getString(7);
                     String district=rs2.getString(8);
                     String address=rs2.getString(9);
                     String email=rs2.getString(10);
                     String emergcontact=String.valueOf(rs2.getLong(11));
                     String date=String.valueOf(rs2.getDate(12));

                     String[] data={rollno,name,fname,contact,bloodgroup,country,province,district,address,email,emergcontact,date};
                     model=(javax.swing.table.DefaultTableModel) table.getModel();
                     model.addRow(data);

                    }

                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Record does not exist!", "Information message", JOptionPane.INFORMATION_MESSAGE);
                }
                con.close();
            }catch(SQLException e){
                JOptionPane.showMessageDialog(null,e);
            }
        }
    }//GEN-LAST:event_searchacrecordActionPerformed

    private void viewacdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewacdataActionPerformed

        tableshow.setText("AC Data");
        boolean check=true;
        
        javax.swing.table.DefaultTableModel model;
        
        table.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Roll No", "Name", "Father's Name","Contact", "Blood Group", "Country", "Province", "District", "Address", "Email", "Emergency Contact", "Room Allow Date"}));
        try{
             Connection con=new DBConnection().getConnection();
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select * from hostel_data_ac");
             while(rs.next())
             {
                 check=false;
                 String rollno=rs.getString(1);
                 String name=rs.getString(2);
                 String fname=rs.getString(3);
                 String contact=String.valueOf(rs.getLong(4));
                 String bloodgroup=rs.getString(5);
                 String country=rs.getString(6);
                 String province=rs.getString(7);
                 String district=rs.getString(8);
                 String address=rs.getString(9);
                 String email=rs.getString(10);
                 String emergcontact=String.valueOf(rs.getLong(11));
                 String date=String.valueOf(rs.getDate(12));
                 
                 String[] data={rollno,name,fname,contact,bloodgroup,country,province,district,address,email,emergcontact,date};
                 model=(javax.swing.table.DefaultTableModel) table.getModel();
                 model.addRow(data);
             }
             
            if(check)
            {
                JOptionPane.showMessageDialog(null, "Table is empty!");
            }
             
             con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
    }//GEN-LAST:event_viewacdataActionPerformed

    private void viewnonacdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewnonacdataActionPerformed

        tableshow.setText("Non AC Data");
        boolean check=true;
        
        javax.swing.table.DefaultTableModel model;
        
        table.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Roll No", "Name", "Father's Name","Contact", "Blood Group", "Country", "Province", "District", "Address", "Email", "Emergency Contact", "Room Allow Date"}));
        try{
             Connection con=new DBConnection().getConnection();
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select * from hostel_data_non_ac");
             while(rs.next())
             {
                 check=false;
                 String rollno=rs.getString(1);
                 String name=rs.getString(2);
                 String fname=rs.getString(3);
                 String contact=String.valueOf(rs.getLong(4));
                 String bloodgroup=rs.getString(5);
                 String country=rs.getString(6);
                 String province=rs.getString(7);
                 String district=rs.getString(8);
                 String address=rs.getString(9);
                 String email=rs.getString(10);
                 String emergcontact=String.valueOf(rs.getLong(11));
                 String date=String.valueOf(rs.getDate(12));
                 
                 String[] data={rollno,name,fname,contact,bloodgroup,country,province,district,address,email,emergcontact,date};
                 model=(javax.swing.table.DefaultTableModel) table.getModel();
                 model.addRow(data);
             }
             
            if(check)
            {
                JOptionPane.showMessageDialog(null, "Table is empty!");
            }
             
             con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
    }//GEN-LAST:event_viewnonacdataActionPerformed

    private void RoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomsActionPerformed

        boolean check=true;
        
        javax.swing.table.DefaultTableModel model;
        roomstable.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"AC Rooms", "Non AC Rooms"}));
        try{
             Connection con=new DBConnection().getConnection();
             Statement s=con.createStatement();
             ResultSet rs=s.executeQuery("select * from rooms");
             while(rs.next())
             {
                 check=false;
                 String str1=String.valueOf(rs.getInt(1));
            	 String str2=String.valueOf(rs.getInt(2));
                 
                 String[] data={str1, str2};
                 model=(javax.swing.table.DefaultTableModel) roomstable.getModel();
                 model.addRow(data);
             }
             
             if(check)
             {
                 String[] data={"0", "0"};
                 model=(javax.swing.table.DefaultTableModel) roomstable.getModel();
                 model.addRow(data);
             }
             
             con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
    }//GEN-LAST:event_RoomsActionPerformed

    private void addacroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addacroomsActionPerformed
        
        String rooms = JOptionPane.showInputDialog(null, "Enter No of rooms");
        
        if(rooms==null)
        {
            
        }
        
        else if(rooms.length()<=0)
        {
            JOptionPane.showMessageDialog(null, "You have entered nothing!", null, JOptionPane.WARNING_MESSAGE);
        }
        
        else if(Pattern.matches("^[A-z]+$", rooms))
        {
            JOptionPane.showMessageDialog(null, "Enter only numbers!", null, JOptionPane.WARNING_MESSAGE);
        }
        
        else if(Pattern.matches("^[0-9]+$", rooms))
        {
       
            int roomsInt = Integer.parseInt(rooms);
            if(roomsInt<=0)
            {
                JOptionPane.showMessageDialog(null, "Enter Correct value!", "Error message", JOptionPane.ERROR_MESSAGE);
            }

            else
            {
                String str=null;
                boolean check=true;
               try{
                    Connection con=new DBConnection().getConnection();
                    Statement s=con.createStatement();
                    ResultSet rs=s.executeQuery("select ac_rooms from rooms");
                    while(rs.next())
                    {
                        check=false;
                        str=String.valueOf(rs.getInt(1));
                    }
                    
                    if(check)
                    {
                        s.executeQuery("insert into rooms values("+rooms+","+0+")");
                        s.executeQuery("commit");
                    }
                    
                    else
                    {
                        int roomsValue=Integer.parseInt(str);
                        int updatedRooms = roomsValue+roomsInt;
                        s.executeQuery("update rooms set ac_rooms="+updatedRooms);
                        s.executeQuery("commit");
                    }
                    con.close();
                    JOptionPane.showMessageDialog(null, "AC rooms added", "Information message", JOptionPane.INFORMATION_MESSAGE);
               }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
               }
            }
        
        }
        
    }//GEN-LAST:event_addacroomsActionPerformed

    private void addnonacroomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnonacroomsActionPerformed
       
        String rooms = JOptionPane.showInputDialog(null, "Enter No of rooms");
        
        if(rooms==null)
        {
            
        }
        
        else if(rooms.length()<=0)
        {
            JOptionPane.showMessageDialog(null, "You have entered nothing!", null, JOptionPane.WARNING_MESSAGE);
        }
        
        else if(Pattern.matches("^[A-z]+$", rooms))
        {
            JOptionPane.showMessageDialog(null, "Enter only numeric!", null, JOptionPane.WARNING_MESSAGE);
        }
        
        else if(Pattern.matches("^[0-9]+$", rooms))
        {
        
            int roomsInt = Integer.parseInt(rooms);
            if(roomsInt<=0)
            {
                JOptionPane.showMessageDialog(null, "Enter Correct value!", "Error message", JOptionPane.ERROR_MESSAGE);
            }

            else
            {
                String str=null;
                boolean check=true;
               try{
                    Connection con=new DBConnection().getConnection();
                    Statement s=con.createStatement();
                    ResultSet rs=s.executeQuery("select non_ac_rooms from rooms");
                    while(rs.next())
                    {
                        check=false;
                        str=String.valueOf(rs.getInt(1));
                    }
                    
                    if(check)
                    {
                        s.executeQuery("insert into rooms values("+0+","+rooms+")");
                        s.executeQuery("commit");
                    }
                    else
                    {  
                        int roomsValue=Integer.parseInt(str);
                        int updatedRooms = roomsValue+roomsInt;
                        s.executeQuery("update rooms set non_ac_rooms="+updatedRooms);
                        s.executeQuery("commit");
                    }
                    con.close();
                    JOptionPane.showMessageDialog(null, "Non AC rooms added", "Information message", JOptionPane.INFORMATION_MESSAGE);
               }catch(SQLException e){
                   JOptionPane.showMessageDialog(null,e);
               }
            }
        
        }
        
    }//GEN-LAST:event_addnonacroomsActionPerformed

    private void searchnonacrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchnonacrecordActionPerformed
        
        boolean check=false;
        String roll_no = JOptionPane.showInputDialog(null, "Enter roll no:");
        
        if(roll_no==null)
        {
            
        }
        
        else if(roll_no.length()<=0)
        {
            
        }
        
        else
        {
        
        try{
            Connection con=new DBConnection().getConnection();
            Statement s=con.createStatement();
            ResultSet rs=s.executeQuery("select roll_no from hostel_data_non_ac");
            while(rs.next())
            {
                String str=rs.getString(1);
                if(str.equals(roll_no))
                {
                    check=true;
                    break;
                }
                else
                {
                    check=false;
                }
            }
            if(check)
            {
                 tableshow.setText("Non AC Record");
                 javax.swing.table.DefaultTableModel model;
                 table.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Roll No", "Name", "Father's Name","Contact", "Blood Group", "Country", "Province", "District", "Address", "Email", "Emergency Contact", "Room Allow Date"}));
                 
                 ResultSet rs2=s.executeQuery("select * from hostel_data_non_ac where roll_no='"+roll_no+"'");
                while(rs2.next())
                {
                 String rollno=rs2.getString(1);
                 String name=rs2.getString(2);
                 String fname=rs2.getString(3);
                 String contact=String.valueOf(rs2.getLong(4));
                 String bloodgroup=rs2.getString(5);
                 String country=rs2.getString(6);
                 String province=rs2.getString(7);
                 String district=rs2.getString(8);
                 String address=rs2.getString(9);
                 String email=rs2.getString(10);
                 String emergcontact=String.valueOf(rs2.getLong(11));
                 String date=String.valueOf(rs2.getDate(12));
                    
                 String[] data={rollno,name,fname,contact,bloodgroup,country,province,district,address,email,emergcontact,date};
                 model=(javax.swing.table.DefaultTableModel) table.getModel();
                 model.addRow(data);
                 
                }
                
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Record does not exist!", "Information message", JOptionPane.INFORMATION_MESSAGE);
            }
            con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
       }
        
    }//GEN-LAST:event_searchnonacrecordActionPerformed

    private void deletenonacrecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletenonacrecordActionPerformed
        
        boolean check=false;
        
       try{
             String roll_no=JOptionPane.showInputDialog(null, "Enter Roll No: ");
           
        if(roll_no==null)
        {
            
        }
        
        else if(roll_no.length()<=0)
        {
            JOptionPane.showMessageDialog(null, "You have entered nothing!", null, JOptionPane.WARNING_MESSAGE);
        }
           
        else
        {
           Connection con=new DBConnection().getConnection();
           Statement s=con.createStatement();
           ResultSet rs=s.executeQuery("select roll_no from hostel_data_non_ac");
           while(rs.next())
           {
               String str=rs.getString(1);
               if(str.equals(roll_no))
               {
                   check=true;
                   break;
               }
               else
               {
                   check=false;
               }
           }
           
           if(check)
           {
                int response = JOptionPane.showConfirmDialog(null, "Sure? Do you want to delete?",null,JOptionPane.YES_NO_OPTION);
		
		if(response==JOptionPane.YES_OPTION)
		{
                    s.executeQuery("delete from hostel_data_non_ac where roll_no='"+roll_no+"'");
                    s.executeQuery("commit");
                    JOptionPane.showMessageDialog(null, "Record Deleted");
		}
		else if(response==JOptionPane.NO_OPTION)
		{
                    
		}
                
           }
           else
           {
               JOptionPane.showMessageDialog(null, "Roll No does not exist!",null,JOptionPane.ERROR_MESSAGE);
           }
        }
        
       }catch(SQLException e){
           JOptionPane.showMessageDialog(null,e);
       }
        
    }//GEN-LAST:event_deletenonacrecordActionPerformed

    private void getacroomallocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getacroomallocationActionPerformed
        
        title.setText("AC Room Allocation Data");
        
        javax.swing.table.DefaultTableModel model;
        boolean check=true;
        roomallocationtable.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Room No", "Student 1", "Students 2"}));
        try{
            Connection con=new DBConnection().getConnection();
            Statement s=con.createStatement();
            ResultSet rs=s.executeQuery("select * from room_allocation order by room_no");
            while(rs.next())
            {
                check=false;
                String str1=String.valueOf(rs.getInt(1));
                String str2=rs.getString(2);
                String str3=rs.getString(3);
                
                String[] data={str1,str2,str3};
                model=(javax.swing.table.DefaultTableModel) roomallocationtable.getModel();
                model.addRow(data);
            }
            
            if(check)
            {
                JOptionPane.showMessageDialog(null, "Table is empty!");
            }
            con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
    }//GEN-LAST:event_getacroomallocationActionPerformed

    private void getnonacroomallocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getnonacroomallocationActionPerformed

        title.setText("Non AC Room Allocation Data");
        
        javax.swing.table.DefaultTableModel model;
        boolean check=true;
        roomallocationtable.setModel(new javax.swing.table.DefaultTableModel(null,new String[] {"Room No", "Student 1", "Students 2"}));
        try{
            Connection con=new DBConnection().getConnection();
            Statement s=con.createStatement();
            ResultSet rs=s.executeQuery("select * from room_allocation_2");
            while(rs.next())
            {
                check=false;
                String str1=String.valueOf(rs.getInt(1));
                String str2=rs.getString(2);
                String str3=rs.getString(3);
                
                String[] data={str1,str2,str3};
                model=(javax.swing.table.DefaultTableModel) roomallocationtable.getModel();
                model.addRow(data);
            }
            
            if(check)
            {
                JOptionPane.showMessageDialog(null, "Table is empty!");
            }
            con.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,e);
        }
        
    }//GEN-LAST:event_getnonacroomallocationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Rooms;
    private javax.swing.JLabel acsearchicon;
    private javax.swing.JButton addacrooms;
    private javax.swing.JButton addnonacrooms;
    private javax.swing.JLabel admincontrol;
    private javax.swing.JPanel adminframepanel;
    private javax.swing.JPanel adminframetitlepanel;
    private javax.swing.JLabel back;
    private javax.swing.JButton deleteacrecord;
    private javax.swing.JButton deletenonacrecord;
    private javax.swing.JLabel deleteolddataicon;
    private javax.swing.JLabel deleterecordicon;
    private javax.swing.JButton getacroomallocation;
    private javax.swing.JButton getnonacroomallocation;
    private javax.swing.JButton guest;
    private javax.swing.JLabel inserticon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel menu;
    private javax.swing.JLabel menulabel;
    private javax.swing.JPanel menupanel;
    private javax.swing.JLabel nonacsearchicon;
    private javax.swing.JTable roomallocationtable;
    private javax.swing.JPanel roomallocationtablepanel;
    private javax.swing.JLabel roomslabel;
    private javax.swing.JPanel roomsmenupanel;
    private javax.swing.JPanel roomspanel;
    private javax.swing.JTable roomstable;
    private javax.swing.JScrollPane roomstablescrolpane;
    private javax.swing.JButton searchacrecord;
    private javax.swing.JButton searchnonacrecord;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablepanel;
    private javax.swing.JScrollPane tablescrollpane;
    private javax.swing.JLabel tableshow;
    private javax.swing.JPanel tableshowpanel;
    private javax.swing.JLabel title;
    private javax.swing.JButton viewacdata;
    private javax.swing.JLabel viewacdataicon;
    private javax.swing.JButton viewnonacdata;
    private javax.swing.JLabel viewnonacdataicon;
    // End of variables declaration//GEN-END:variables
}
